import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "~/utils/api";
import { useRouter } from "next/router";
import { useState, useEffect } from "react";
import { Game } from "~/components/game";
import { useLocalStorage } from "~/utils/utils";
import type { LocalData } from "~/types";

export const getServerSideProps = () => ({
    props: { }
});

const GamePage: NextPage = (aaa) => {
    const router = useRouter();
    const { slug } = router.query;
    console.log({slug})
    const [localData, setLocalData] = useLocalStorage<LocalData>('tickoattwo', { });
    console.log({localData})
    const connectPlayerMutation = api.example.connectPlayer.useMutation();
    const defaultPlayerInfo = typeof slug === 'string' ? localData[slug] : undefined;
    // useEffect nemuuze sledovat ^?
    const [playerRole, setPlayerRole] = useState(defaultPlayerInfo?.role);
    const [playerId, setPlayerId] = useState(defaultPlayerInfo?.role !== 'spectator' ? defaultPlayerInfo?.playerId : undefined);
    console.log({aaa, slug, localData, defaultPlayerInfo, playerRole, playerId})

    // if(typeof window === 'undefined') {
    //     // TODO: return a Head with og:tags
    //     return <></>;
    // }

    useEffect(() => {
        if (typeof slug !== 'string')
            return;  // something really bad happened

        if (playerId && playerRole)
            return;  // we were already connected

        void (async () => {
            const playerInfo = await connectPlayerMutation.mutateAsync({ slug });
            if (!playerInfo)
                return;  // you're a spectator or something went wrong :D

            setLocalData({ ...localData, [slug]: playerInfo });
            setPlayerRole(playerInfo.role);
            setPlayerId(playerInfo.playerId);
        })();
    }, []);

    if (!slug || typeof slug !== 'string')
        return null;

    if (!playerRole || !playerId)
        return null;

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <Game slug={slug} role={playerRole} playerId={playerId} />
            </main>
        </>
    );
};

export default GamePage;
